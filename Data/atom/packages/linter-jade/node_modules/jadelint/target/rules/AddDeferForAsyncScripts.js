var AddDeferForAsyncScripts, Rule,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

AddDeferForAsyncScripts = (function(superClass) {
  extend(AddDeferForAsyncScripts, superClass);

  function AddDeferForAsyncScripts() {
    return AddDeferForAsyncScripts.__super__.constructor.apply(this, arguments);
  }

  AddDeferForAsyncScripts.prototype.name = 'Add defer for async JS scripts';

  AddDeferForAsyncScripts.prototype.level = 'warning';

  AddDeferForAsyncScripts.prototype.description = "Use `defer` attributes on scripts with the `async` attribute\n\n```jade\n//- Valid\nscript(async defer src='script.js')\n\n//- Invalid\nscript(async src='script.js')";

  AddDeferForAsyncScripts.prototype.check = function() {
    var hasAsync, hasDefer, i, len, name, ref, ref1, val;
    if (this.node.type === 'Tag' && this.node.name === 'script') {
      hasDefer = hasAsync = false;
      ref = this.node.attrs;
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], name = ref1.name, val = ref1.val;
        if (name === 'defer') {
          hasDefer = true;
        }
        if (name === 'async') {
          hasAsync = true;
        }
      }
      if (hasAsync && !hasDefer) {
        return this.fail();
      }
    }
  };

  return AddDeferForAsyncScripts;

})(Rule);

module.exports = AddDeferForAsyncScripts;
