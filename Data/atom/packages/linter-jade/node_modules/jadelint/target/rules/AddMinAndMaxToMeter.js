var AddMinAndMaxToMeter, Rule,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

AddMinAndMaxToMeter = (function(superClass) {
  extend(AddMinAndMaxToMeter, superClass);

  function AddMinAndMaxToMeter() {
    return AddMinAndMaxToMeter.__super__.constructor.apply(this, arguments);
  }

  AddMinAndMaxToMeter.prototype.name = 'Add min and max attributes to meter elements';

  AddMinAndMaxToMeter.prototype.level = 'warning';

  AddMinAndMaxToMeter.prototype.description = "All `meter` elements must also have `min` and `max` attributes\n\n```jade\n//- Valid\nmeter(value='50' max='100' min='0')\n\n//- Invalid\nmeter(value='0.5')\n```";

  AddMinAndMaxToMeter.prototype.check = function() {
    var hasMax, hasMin, i, len, name, ref, ref1, val;
    if (this.node.type === 'Tag' && this.node.name === 'meter') {
      hasMax = hasMin = false;
      ref = this.node.attrs;
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], name = ref1.name, val = ref1.val;
        if (name === 'max') {
          hasMax = true;
        }
        if (name === 'min') {
          hasMin = true;
        }
      }
      if (!(hasMax && hasMin)) {
        return this.fail();
      }
    }
  };

  return AddMinAndMaxToMeter;

})(Rule);

module.exports = AddMinAndMaxToMeter;
