var FirstChildOfFieldsetIsLegend, Rule,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

FirstChildOfFieldsetIsLegend = (function(superClass) {
  extend(FirstChildOfFieldsetIsLegend, superClass);

  function FirstChildOfFieldsetIsLegend() {
    return FirstChildOfFieldsetIsLegend.__super__.constructor.apply(this, arguments);
  }

  FirstChildOfFieldsetIsLegend.prototype.name = 'Only use the legent tag at start of a fieldset';

  FirstChildOfFieldsetIsLegend.prototype.level = 'ignore';

  FirstChildOfFieldsetIsLegend.prototype.description = "Only use the `legend` tag at the beginning of a `fieldset` tag\n\n```jade\n//- Valid\nfieldset\n  legend about\n  p Some text\n\n//- Invalid\n    fieldset\n      p Some text\n      legend about\n```";

  FirstChildOfFieldsetIsLegend.prototype.check = function() {
    var i, index, len, ref, ref1, results, subnode, subnodes;
    if (this.node.type === 'Tag' && this.node.name === 'fieldset') {
      subnodes = (ref = (ref1 = this.node.block) != null ? ref1.nodes : void 0) != null ? ref : [];
      results = [];
      for (index = i = 0, len = subnodes.length; i < len; index = ++i) {
        subnode = subnodes[index];
        if (subnode.name === 'legend' && index !== 0) {
          results.push(this.fail());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  return FirstChildOfFieldsetIsLegend;

})(Rule);

module.exports = FirstChildOfFieldsetIsLegend;
