var AddTitleToAlternateStylesheets, Rule,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

AddTitleToAlternateStylesheets = (function(superClass) {
  extend(AddTitleToAlternateStylesheets, superClass);

  function AddTitleToAlternateStylesheets() {
    return AddTitleToAlternateStylesheets.__super__.constructor.apply(this, arguments);
  }

  AddTitleToAlternateStylesheets.prototype.name = 'Add title to alternate stylesheet';

  AddTitleToAlternateStylesheets.prototype.level = 'warning';

  AddTitleToAlternateStylesheets.prototype.description = "Use a `title` attribute on alternate stylesheets\n\n```jade\n//- Valid\nlink(href='my.css' rel='alternate stylesheet' title='Altsheet')\n\n//- Invalid\nlink(href='my.css' rel='alternate stylesheet')\n```";

  AddTitleToAlternateStylesheets.prototype.check = function() {
    var hasTitle, i, isAlternateStylesheet, len, name, ref, ref1, val;
    if (this.node.type === 'Tag' && this.node.name === 'link') {
      isAlternateStylesheet = false;
      hasTitle = false;
      ref = this.node.attrs;
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], name = ref1.name, val = ref1.val;
        if (name === 'rel' && this.clean(val) === 'alternate stylesheet') {
          isAlternateStylesheet = true;
        }
        if (name === 'title') {
          hasTitle = true;
        }
      }
      if (isAlternateStylesheet && !hasTitle) {
        return this.fail();
      }
    }
  };

  return AddTitleToAlternateStylesheets;

})(Rule);

module.exports = AddTitleToAlternateStylesheets;
