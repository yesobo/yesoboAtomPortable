var RequireStatementInCodeBock, Rule,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

RequireStatementInCodeBock = (function(superClass) {
  extend(RequireStatementInCodeBock, superClass);

  function RequireStatementInCodeBock() {
    return RequireStatementInCodeBock.__super__.constructor.apply(this, arguments);
  }

  RequireStatementInCodeBock.prototype.name = 'Statements in code blocks must be valid JS';

  RequireStatementInCodeBock.prototype.level = 'error';

  RequireStatementInCodeBock.prototype.description = "All code in a code block must be a valid statement.\n\n```jade\n//- Invalid\n- var n = 0;\n- while (n < 10)\n    - n++\n    li= n\n```\n\n//- Valid\n- var n = 0;\nwhile (n < 10)\n    - n++\n    li= n";

  RequireStatementInCodeBock.prototype.check = function() {
    var error;
    if (this.node.type === 'Code' && (this.node.buffer != null) && (this.node.escape != null)) {
      try {
        return new Function(this.node.val);
      } catch (_error) {
        error = _error;
        return this.fail();
      }
    }
  };

  return RequireStatementInCodeBock;

})(Rule);

module.exports = RequireStatementInCodeBock;
