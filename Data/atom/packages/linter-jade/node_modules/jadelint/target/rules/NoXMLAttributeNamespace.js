var NoXMLAttributeNamespace, Rule,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

NoXMLAttributeNamespace = (function(superClass) {
  extend(NoXMLAttributeNamespace, superClass);

  function NoXMLAttributeNamespace() {
    return NoXMLAttributeNamespace.__super__.constructor.apply(this, arguments);
  }

  NoXMLAttributeNamespace.prototype.name = 'No namespacing of attributes attribute allowed';

  NoXMLAttributeNamespace.prototype.level = 'warning';

  NoXMLAttributeNamespace.prototype.description = "An attribute cannot be namespaced with `namespace:attribute`";

  NoXMLAttributeNamespace.prototype.check = function() {
    var i, len, name, ref, ref1, ref2, results, val;
    ref1 = (ref = this.node.attrs) != null ? ref : [];
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      ref2 = ref1[i], name = ref2.name, val = ref2.val;
      if (name.match(/\w+:\w+/g)) {
        results.push(this.fail());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return NoXMLAttributeNamespace;

})(Rule);

module.exports = NoXMLAttributeNamespace;
