var DontUsePlaintextInBlockquote, Rule,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

DontUsePlaintextInBlockquote = (function(superClass) {
  extend(DontUsePlaintextInBlockquote, superClass);

  function DontUsePlaintextInBlockquote() {
    return DontUsePlaintextInBlockquote.__super__.constructor.apply(this, arguments);
  }

  DontUsePlaintextInBlockquote.prototype.name = 'Dont use plaintext in a blockquote tag';

  DontUsePlaintextInBlockquote.prototype.level = 'ignore';

  DontUsePlaintextInBlockquote.prototype.description = "Don't use plaintext in a `blockquote` tag\n\n```jade\n//- Valid\nblockquote: p This is a quote\n\n//- Invalid\nblockquote This is a quote\n```";

  DontUsePlaintextInBlockquote.prototype.check = function() {
    var firstChild, ref, ref1, ref2, subnodes;
    if (this.node.type === 'Tag' && this.node.name === 'blockquote') {
      subnodes = (ref = (ref1 = this.node.block) != null ? ref1.nodes : void 0) != null ? ref : [];
      firstChild = (ref2 = subnodes[0]) != null ? ref2 : {};
      if (firstChild.type === 'Text') {
        return this.fail();
      }
    }
  };

  return DontUsePlaintextInBlockquote;

})(Rule);

module.exports = DontUsePlaintextInBlockquote;
