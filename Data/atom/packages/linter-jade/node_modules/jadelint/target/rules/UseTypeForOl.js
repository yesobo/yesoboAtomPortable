var Rule, UseTypeForOl,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

UseTypeForOl = (function(superClass) {
  extend(UseTypeForOl, superClass);

  function UseTypeForOl() {
    return UseTypeForOl.__super__.constructor.apply(this, arguments);
  }

  UseTypeForOl.prototype.name = 'Use a type attribute for ol tags';

  UseTypeForOl.prototype.level = 'ignore';

  UseTypeForOl.prototype.description = "Use a `type` attribute for `ol` tags\n\n```jade\n//- Valid\nol(type='I')\n  li thing\n  li other\n\n//- Invalid\nol\n  li thing\n  li other\n```";

  UseTypeForOl.prototype.check = function() {
    var i, len, name, ref, ref1, val;
    if (this.node.type === 'Tag' && this.node.name === 'ol') {
      ref = this.node.attrs;
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], name = ref1.name, val = ref1.val;
        if (name === 'type') {
          return;
        }
      }
      return this.fail();
    }
  };

  return UseTypeForOl;

})(Rule);

module.exports = UseTypeForOl;
