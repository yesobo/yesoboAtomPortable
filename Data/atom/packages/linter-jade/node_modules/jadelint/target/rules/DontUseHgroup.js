var DontUseHgroup, Rule,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

DontUseHgroup = (function(superClass) {
  extend(DontUseHgroup, superClass);

  function DontUseHgroup() {
    return DontUseHgroup.__super__.constructor.apply(this, arguments);
  }

  DontUseHgroup.prototype.name = 'Dont use the hgroup tag';

  DontUseHgroup.prototype.level = 'error';

  DontUseHgroup.prototype.description = "Don't use an `hgroup` tag";

  DontUseHgroup.prototype.check = function() {
    if (this.node.type === 'Tag' && this.node.name === 'hgroup') {
      return this.fail();
    }
  };

  return DontUseHgroup;

})(Rule);

module.exports = DontUseHgroup;
