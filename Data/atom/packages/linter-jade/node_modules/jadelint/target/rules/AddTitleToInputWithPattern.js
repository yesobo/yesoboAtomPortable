var AddTitleToInputWithPattern, Rule,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

AddTitleToInputWithPattern = (function(superClass) {
  extend(AddTitleToInputWithPattern, superClass);

  function AddTitleToInputWithPattern() {
    return AddTitleToInputWithPattern.__super__.constructor.apply(this, arguments);
  }

  AddTitleToInputWithPattern.prototype.name = 'Add title attibute to input element when there is pattern attribute';

  AddTitleToInputWithPattern.prototype.level = 'warning';

  AddTitleToInputWithPattern.prototype.description = "When an `input` element has a `pattern` attribute include a `title`\nattribute.\n\n```jade\n//- Valid\ninput(pattern='[0-9]{3}' title='PIN Number')\n\n//- Invalid\ninput(pattern='[0-9]{3}')\n```";

  AddTitleToInputWithPattern.prototype.check = function() {
    var hasPattern, hasTitle, hasValue, i, len, name, ref, ref1, val;
    if (this.node.type === 'Tag' && this.node.name === 'input') {
      hasPattern = hasValue = false;
      ref = this.node.attrs;
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], name = ref1.name, val = ref1.val;
        if (name === 'title') {
          hasTitle = true;
        }
        if (name === 'pattern') {
          hasPattern = true;
        }
      }
      if (hasPattern && !hasTitle) {
        return this.fail();
      }
    }
  };

  return AddTitleToInputWithPattern;

})(Rule);

module.exports = AddTitleToInputWithPattern;
