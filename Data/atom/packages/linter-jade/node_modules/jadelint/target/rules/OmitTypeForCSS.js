var OmitTypeForCSS, Rule,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

OmitTypeForCSS = (function(superClass) {
  extend(OmitTypeForCSS, superClass);

  function OmitTypeForCSS() {
    return OmitTypeForCSS.__super__.constructor.apply(this, arguments);
  }

  OmitTypeForCSS.prototype.name = 'Omit type attribute for CSS styles';

  OmitTypeForCSS.prototype.level = 'warning';

  OmitTypeForCSS.prototype.description = "Don't do `style(type='text/css')`";

  OmitTypeForCSS.prototype.check = function() {
    var i, len, name, ref, ref1, results, val;
    if (this.node.type === 'Tag' && this.node.name === 'style') {
      ref = this.node.attrs;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], name = ref1.name, val = ref1.val;
        if (name === 'type' && this.clean(val) === 'text/css') {
          results.push(this.fail());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  return OmitTypeForCSS;

})(Rule);

module.exports = OmitTypeForCSS;
