var NoAttributeWhitespace, Rule,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

NoAttributeWhitespace = (function(superClass) {
  extend(NoAttributeWhitespace, superClass);

  function NoAttributeWhitespace() {
    return NoAttributeWhitespace.__super__.constructor.apply(this, arguments);
  }

  NoAttributeWhitespace.prototype.name = 'No Whitespace is allowed around attribute values';

  NoAttributeWhitespace.prototype.level = 'warning';

  NoAttributeWhitespace.prototype.description = "Attribute tags cannot contain edge whitespace\n\n```jade\n//- Valid\ndiv(id='id')\n\n//- Invalid\ndiv(id='  id')\ndiv(id='id  ')\ndiv(id='  id  ')\ndiv(id=\" id\")\n```";

  NoAttributeWhitespace.prototype.check = function() {
    var i, len, name, rawVal, ref, ref1, ref2, results, val;
    ref1 = (ref = this.node.attrs) != null ? ref : [];
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      ref2 = ref1[i], name = ref2.name, val = ref2.val;
      rawVal = this.clean(val);
      if (rawVal !== rawVal.trim()) {
        results.push(this.fail());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return NoAttributeWhitespace;

})(Rule);

module.exports = NoAttributeWhitespace;
