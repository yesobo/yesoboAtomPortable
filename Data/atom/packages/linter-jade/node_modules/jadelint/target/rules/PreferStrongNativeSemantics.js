var PreferStrongNativeSemantics, Rule,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

PreferStrongNativeSemantics = (function(superClass) {
  extend(PreferStrongNativeSemantics, superClass);

  function PreferStrongNativeSemantics() {
    return PreferStrongNativeSemantics.__super__.constructor.apply(this, arguments);
  }

  PreferStrongNativeSemantics.prototype.name = 'Prefer strong native semantics';

  PreferStrongNativeSemantics.prototype.level = 'ignore';

  PreferStrongNativeSemantics.prototype.description = "Don't use `role=\"..\"` on `nav`, `hr`, or `br`";

  PreferStrongNativeSemantics.prototype.check = function() {
    var i, len, name, ref, ref1, ref2, results, val;
    if (this.node.type === 'Tag' && ((ref = this.node.name) === 'nav' || ref === 'hr' || ref === 'br')) {
      ref1 = this.node.attrs;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        ref2 = ref1[i], name = ref2.name, val = ref2.val;
        if (name === 'role') {
          results.push(this.fail());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  return PreferStrongNativeSemantics;

})(Rule);

module.exports = PreferStrongNativeSemantics;
