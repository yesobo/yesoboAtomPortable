var Rule, UseUTF8,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

UseUTF8 = (function(superClass) {
  extend(UseUTF8, superClass);

  function UseUTF8() {
    return UseUTF8.__super__.constructor.apply(this, arguments);
  }

  UseUTF8.prototype.name = 'Only use UTF-8 as charset';

  UseUTF8.prototype.level = 'error';

  UseUTF8.prototype.description = "Only use `UTF-8` as the `charset`\n\n```jade\n//- Valid\nmeta(charset='UTF-8')\n\n//- Invalid\nmeta(charset='UFT8')\nmeta(charset='OtherSet')\n```";

  UseUTF8.prototype.check = function() {
    var i, len, name, ref, ref1, results, val;
    if (this.node.type === 'Tag' && this.node.name === 'meta') {
      ref = this.node.attrs;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], name = ref1.name, val = ref1.val;
        if (name === 'charset' && this.clean(val).toLowerCase() !== 'utf-8') {
          results.push(this.fail());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  return UseUTF8;

})(Rule);

module.exports = UseUTF8;
