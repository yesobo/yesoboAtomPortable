var AddValueToSubmit, Rule,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Rule = require('./../Rule');

AddValueToSubmit = (function(superClass) {
  extend(AddValueToSubmit, superClass);

  function AddValueToSubmit() {
    return AddValueToSubmit.__super__.constructor.apply(this, arguments);
  }

  AddValueToSubmit.prototype.name = 'Add value attribute to submit types';

  AddValueToSubmit.prototype.level = 'warning';

  AddValueToSubmit.prototype.description = "Add value attribute to `input(type='submit')`\n\n```jade\n//- Valid\ninput(type=\"submit\" value=\"Search\")\n\n//- Invalid\ninput(type=\"submit\")\n```";

  AddValueToSubmit.prototype.check = function() {
    var hasValue, i, isSubmit, len, name, ref, ref1, val;
    if (this.node.type === 'Tag' && this.node.name === 'input') {
      isSubmit = hasValue = false;
      ref = this.node.attrs;
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], name = ref1.name, val = ref1.val;
        if (name === 'type' && this.clean(val) === 'submit') {
          isSubmit = true;
        }
        if (name === 'value') {
          hasValue = true;
        }
      }
      if (isSubmit && !hasValue) {
        return this.fail();
      }
    }
  };

  return AddValueToSubmit;

})(Rule);

module.exports = AddValueToSubmit;
