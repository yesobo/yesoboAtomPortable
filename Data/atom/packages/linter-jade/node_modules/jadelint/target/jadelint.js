var Linter, Reporter, fs, jadelint, path, readdir, rules;

fs = require('fs');

path = require('path');

readdir = require('fs-readdir-recursive');

Linter = require('./Linter');

Reporter = require('./Reporter');

rules = require('./rules');

module.exports = jadelint = function(filenames, reporter, callback) {
  var conf, contents, errors, exitCode, filename, i, j, len, len1, level, linter, ref, rule, subfile;
  try {
    conf = JSON.parse(fs.readFileSync('.jadelintrc'));
    try {
      for (rule in conf) {
        level = conf[rule];
        rules.rules[rule].prototype.level = level;
      }
    } catch (_error) {}
  } catch (_error) {}
  if (reporter == null) {
    reporter = new Reporter();
  }
  for (i = 0, len = filenames.length; i < len; i++) {
    filename = filenames[i];
    if (fs.lstatSync(filename).isDirectory()) {
      ref = readdir(filename);
      for (j = 0, len1 = ref.length; j < len1; j++) {
        subfile = ref[j];
        contents = fs.readFileSync(path.join(filename, subfile));
        linter = new Linter(path.join(filename, subfile), contents.toString());
        errors = linter.lint();
        reporter.aggregate(errors, path.join(filename, subfile));
      }
    } else {
      contents = fs.readFileSync(filename);
      linter = new Linter(filename, contents.toString());
      errors = linter.lint();
      reporter.aggregate(errors, filename);
    }
  }
  exitCode = reporter.report();
  return callback(reporter.log, exitCode);
};
