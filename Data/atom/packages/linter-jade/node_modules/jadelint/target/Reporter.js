var Reporter, chalk, symbol, table;

chalk = require('chalk');

symbol = require('log-symbols');

table = require('text-table');

Reporter = (function() {
  function Reporter() {
    this.errCount = 0;
    this.warnCount = 0;
    this.log = '';
  }

  Reporter.prototype.aggregate = function(errors, filename) {
    var errTable, fileErrCount, fileWarnCount, ref;
    if (filename == null) {
      filename = (ref = errors[0]) != null ? ref.filename : void 0;
    }
    fileErrCount = 0;
    fileWarnCount = 0;
    errTable = table(errors.filter(function(err) {
      return (err.level != null) && err.level !== 'ignore';
    }).map(function(err) {
      var level, line, name;
      level = err.level, name = err.name, filename = err.filename, line = err.line;
      if (level === 'error') {
        fileErrCount++;
      }
      if (level === 'warning') {
        fileWarnCount++;
      }
      return ['', symbol[level], chalk.grey("line " + line), chalk.blue(name)];
    }));
    if (filename && fileErrCount > 0 || fileWarnCount > 0) {
      this.log += "\n" + (chalk.underline(filename)) + "\n";
    } else {
      '';
    }
    this.errCount += fileErrCount;
    this.warnCount += fileWarnCount;
    this.log += errTable;
    if (errors.length !== 0) {
      return this.log += '\n';
    }
  };

  Reporter.prototype.report = function() {
    var problems;
    this.log += '\n';
    if (this.warnCount > 0) {
      this.log += chalk.yellow(symbol.warning + "  " + this.warnCount + " warning" + (this.warnCount !== 1 ? 's' : '') + "\n");
    }
    if (this.errCount > 0) {
      this.log += chalk.red(symbol.error + "  " + this.errCount + " error" + (this.errCount !== 1 ? 's' : '') + "\n");
    }
    if (this.errCount === 0 && this.warnCount === 0) {
      this.log += chalk.green(symbol.success + " No problems found!\n");
      problems = false;
    } else {
      problems = true;
    }
    if (problems) {
      return 1;
    } else {
      return 0;
    }
  };

  return Reporter;

})();

module.exports = Reporter;
